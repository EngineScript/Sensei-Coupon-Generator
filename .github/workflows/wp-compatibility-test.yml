# This workflow performs comprehensive WordPress plugin compatibility and quality checks.
# It runs multiple validation processes including:
# - WordPress Plugin Check for WordPress.org compatibility
# - PHP compatibility testing across multiple PHP versions (7.4, 8.0, 8.1, 8.2, 8.3, 8.4)
# - WordPress compatibility testing across multiple WP versions (6.0, latest, nightly)
# - PHPCS code standards validation for WordPress coding standards
# - Code quality analysis and automated issue creation for failures
# The workflow ensures the plugin meets WordPress.org standards and maintains compatibility.

name: WordPress Compatibility & Plugin Check

on:
  # Run on pushes to main branch and on all pull requests
  push:
    branches: [ main ]
  pull_request:
  # Allow manually triggering the workflow
  workflow_dispatch:

# Cancels all previous workflow runs for the same branch that have not yet completed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  issues: write

jobs:
  plugin-check:
    name: WordPress Plugin Check (PHP ${{ matrix.php-version }})
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        php-version: ['7.4', '8.0', '8.1', '8.2', '8.3']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mysqli, curl, zip, intl, gd, mbstring, fileinfo, xml
          coverage: none
          tools: composer:v2
      
      - name: Install Composer dependencies
        run: |
          if [ -f composer.json ]; then
            composer install --prefer-dist --no-progress --no-dev
          else
            echo "No composer.json found. Skipping composer install."
          fi
      
      - name: WordPress Plugin Check
        uses: WordPress/plugin-check-action@v1.1.2
        with:
          # Build directory - using repository root
          build-dir: './'
          
          # Configure which categories to check
          categories: |
            accessibility
            general
            performance
            plugin_repo
            security
          
          # Whether to include experimental checks
          include-experimental: false
          
          # Don't ignore warnings or errors
          ignore-warnings: false
          ignore-errors: false
          
          # WordPress version to use
          wp-version: 'latest'

  phpcs:
    name: PHPCS Code Standards Check (PHP ${{ matrix.php-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ['7.4', '8.0', '8.1', '8.2', '8.3']
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mysqli, curl, zip, intl, gd, mbstring, fileinfo, xml
          coverage: none
          tools: composer:v2, phpcs

      - name: Install WordPress Coding Standards
        run: |
          # Install PHPCS and WordPress Coding Standards
          composer global config allow-plugins.dealerdirect/phpcodesniffer-composer-installer true
          composer global require --dev squizlabs/php_codesniffer:"^3.7"
          composer global require --dev wp-coding-standards/wpcs:"^3.0"
          composer global require --dev dealerdirect/phpcodesniffer-composer-installer:"^1.0"
          
          # Add composer bin to PATH
          echo "$HOME/.composer/vendor/bin" >> $GITHUB_PATH
          
          # Verify installation
          phpcs -i

      - name: Run PHPCS
        run: |
          # Run PHPCS with WordPress standards
          phpcs --standard=WordPress-Core --extensions=php --ignore=vendor,tests,node_modules . || true

  php-compatibility:
    name: PHP Compatibility Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mysqli, curl, zip, intl, gd, mbstring, fileinfo, xml
          coverage: none
          tools: composer:v2, phpcs
      
      - name: Install PHP Compatibility Checker
        run: |
          composer global require --dev phpcompatibility/php-compatibility
          composer global config allow-plugins.dealerdirect/phpcodesniffer-composer-installer true
          composer global require --dev dealerdirect/phpcodesniffer-composer-installer:"^1.0"
          
          # Add composer bin to PATH
          echo "$HOME/.composer/vendor/bin" >> $GITHUB_PATH
          
          # Configure PHPCS to use PHPCompatibility
          phpcs --config-set installed_paths ~/.composer/vendor/phpcompatibility/php-compatibility
          phpcs -i
      
      - name: Run PHP Compatibility Check
        run: |
          # Check compatibility with PHP 7.4+
          phpcs --standard=PHPCompatibility --runtime-set testVersion 7.4- --extensions=php --ignore=vendor,tests,node_modules . || true

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run security scan
        run: |
          # Basic security pattern checks
          echo "Checking for common security issues..."
          
          # Check for eval() usage
          if grep -r "eval(" --include="*.php" .; then
            echo "⚠️  Found eval() usage - potential security risk"
          fi
          
          # Check for $_GET/$_POST without sanitization
          if grep -r "\$_\(GET\|POST\)\[" --include="*.php" . | grep -v "sanitize\|esc_\|wp_verify_nonce"; then
            echo "⚠️  Found unsanitized \$_GET/\$_POST usage"
          fi
          
          # Check for direct file inclusion
          if grep -r "include\|require" --include="*.php" . | grep "\$_"; then
            echo "⚠️  Found dynamic file inclusion - potential security risk"
          fi
          
          echo "✅ Security scan completed"
